//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: darkside.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf
@testable import ZcashLightClientKit

/// Usage: instantiate DarksideStreamerClient, then call methods of this protocol to make API calls.
internal protocol DarksideStreamerClientProtocol {
  func setMetaState(_ request: DarksideMetaState, callOptions: CallOptions?) -> UnaryCall<DarksideMetaState, Empty>
  func setBlocks(_ request: DarksideBlocks, callOptions: CallOptions?) -> UnaryCall<DarksideBlocks, Empty>
  func setBlocksUrl(_ request: DarksideBlocksUrl, callOptions: CallOptions?) -> UnaryCall<DarksideBlocksUrl, Empty>
  func setTx(_ request: DarksideTx, callOptions: CallOptions?) -> UnaryCall<DarksideTx, Empty>
  func getIncomingTransactions(_ request: Empty, callOptions: CallOptions?, handler: @escaping (RawTransaction) -> Void) -> ServerStreamingCall<Empty, RawTransaction>
}

internal final class DarksideStreamerClient: GRPCClient, DarksideStreamerClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the cash.z.wallet.sdk.rpc.DarksideStreamer service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }

  /// Set (some of) the values that should be returned by GetLightdInfo()
  ///
  /// - Parameters:
  ///   - request: Request to send to SetMetaState.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setMetaState(_ request: DarksideMetaState, callOptions: CallOptions? = nil) -> UnaryCall<DarksideMetaState, Empty> {
    return self.makeUnaryCall(path: "/cash.z.wallet.sdk.rpc.DarksideStreamer/SetMetaState",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// SetBlocks() replaces the specified range of blocks (gaps not allowed);
  /// for example, you can set blocks 1000-1006, do some tests, then set blocks
  /// 1003-1004. This preserves blocks 1000-1002, replaces blocks 1003-1004,
  /// and removes blocks 1005-1006. This can be used to simulate a chain reorg.
  /// Blocks are hex-encoded.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetBlocks.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setBlocks(_ request: DarksideBlocks, callOptions: CallOptions? = nil) -> UnaryCall<DarksideBlocks, Empty> {
    return self.makeUnaryCall(path: "/cash.z.wallet.sdk.rpc.DarksideStreamer/SetBlocks",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// This is the same as SetBlocks(), except the blocks are fetched
  /// from the given URL. Blocks are one per line, hex-encoded (not JSON).
  ///
  /// - Parameters:
  ///   - request: Request to send to SetBlocksUrl.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setBlocksUrl(_ request: DarksideBlocksUrl, callOptions: CallOptions? = nil) -> UnaryCall<DarksideBlocksUrl, Empty> {
    return self.makeUnaryCall(path: "/cash.z.wallet.sdk.rpc.DarksideStreamer/SetBlocksUrl",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// SetTx() allows the test coordinator to submit a list of transactions and
  /// for each indicate in which block it should appear.
  /// For example,
  ///   tx1, block=1001
  ///   tx2, block=1002
  ///   tx3, block=1002
  /// Then use Setblocks(1000-1005): block 1001 will include tx1 (plus
  /// any transactions were part of that block to begin with); tx2 and tx3
  /// will appear in block 1002. Blocks 1003-1005 will be returned as submitted.
  ///
  /// If you first set a range of blocks, then submit transactions within that
  /// range, it's too late for them to be included in those blocks. If blocks
  /// are resubmitted, then those transactions are included in those blocks.
  ///
  /// Calling GetTransaction() on tx1-3 will return those transactions, and
  /// GetTransaction() will also return any transactions that were part of
  /// the submitted blocks.
  ///
  /// Each call to SetTx() completely replaces the stored transaction set.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetTx.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setTx(_ request: DarksideTx, callOptions: CallOptions? = nil) -> UnaryCall<DarksideTx, Empty> {
    return self.makeUnaryCall(path: "/cash.z.wallet.sdk.rpc.DarksideStreamer/SetTx",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Calls to SendTransaction() are accepted and stored; this method returns
  /// all transactions that were previously submitted. This enables the
  /// following kind of test, for example:
  ///   1. wallet submits a transaction
  ///   2. Test coordinator retrives the transaction using this interface
  ///   3. Test coordinator submits the transaction using SetTx()
  ///   4. Darksidewalletd simulates the transaction appearing in a mined block
  ///
  /// - Parameters:
  ///   - request: Request to send to GetIncomingTransactions.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getIncomingTransactions(_ request: Empty, callOptions: CallOptions? = nil, handler: @escaping (RawTransaction) -> Void) -> ServerStreamingCall<Empty, RawTransaction> {
    return self.makeServerStreamingCall(path: "/cash.z.wallet.sdk.rpc.DarksideStreamer/GetIncomingTransactions",
                                        request: request,
                                        callOptions: callOptions ?? self.defaultCallOptions,
                                        handler: handler)
  }

}


// Provides conformance to `GRPCPayload` for request and response messages
extension DarksideMetaState: GRPCProtobufPayload {}
//extension Empty: GRPCProtobufPayload {}
extension DarksideBlocks: GRPCProtobufPayload {}
extension DarksideBlocksUrl: GRPCProtobufPayload {}
extension DarksideTx: GRPCProtobufPayload {}
//extension RawTransaction: GRPCProtobufPayload {}

