// Copyright (c) 2023 The Zcash developers
// Distributed under the MIT software license, see the accompanying
// file COPYING or https://www.opensource.org/licenses/mit-license.php .

syntax = "proto3";
package cash.z.wallet.sdk.ffi;
option swift_prefix = "Ffi";

// A data structure that describes the inputs to be consumed and outputs to
// be produced in a proposed transaction.
message Proposal {
    uint32 protoVersion = 1;
    // ZIP 321 serialized transaction request
    string transactionRequest = 2;
    // The anchor height to be used in creating the transaction, if any.
    // Setting the anchor height to zero will disallow the use of any shielded
    // inputs.
    uint32 anchorHeight = 3;
    // The inputs to be used in creating the transaction.
    repeated ProposedInput inputs = 4;
    // The total value, fee value, and change outputs of the proposed
    // transaction
    TransactionBalance balance = 5;
    // The fee rule used in constructing this proposal
    FeeRule feeRule = 6;
    // The target height for which the proposal was constructed
    //
    // The chain must contain at least this many blocks in order for the proposal to
    // be executed.
    uint32 minTargetHeight = 7;
    // A flag indicating whether the proposal is for a shielding transaction,
    // used for determining which OVK to select for wallet-internal outputs.
    bool isShielding = 8;
}

enum ValuePool {
    // Protobuf requires that enums have a zero discriminant as the default
    // value. However, we need to require that a known value pool is selected,
    // and we do not want to fall back to any default, so sending the
    // PoolNotSpecified value will be treated as an error.
    PoolNotSpecified = 0;
    // The transparent value pool (P2SH is not distinguished from P2PKH)
    Transparent = 1;
    // The Sapling value pool
    Sapling = 2;
    // The Orchard value pool
    Orchard = 3;
}

// The unique identifier and value for each proposed input.
message ProposedInput {
    bytes txid = 1;
    ValuePool valuePool = 2;
    uint32 index = 3;
    uint64 value = 4;
}

// The fee rule used in constructing a Proposal
enum FeeRule {
    // Protobuf requires that enums have a zero discriminant as the default
    // value. However, we need to require that a known fee rule is selected,
    // and we do not want to fall back to any default, so sending the
    // FeeRuleNotSpecified value will be treated as an error.
    FeeRuleNotSpecified = 0;
    // 10000 ZAT
    PreZip313 = 1;
    // 1000 ZAT
    Zip313 = 2;
    // MAX(10000, 5000 * logical_actions) ZAT
    Zip317 = 3;
}

// The proposed change outputs and fee value.
message TransactionBalance {
    repeated ChangeValue proposedChange = 1;
    uint64 feeRequired = 2;
}

// A proposed change output. If the transparent value pool is selected,
// the `memo` field must be null.
message ChangeValue {
    uint64 value = 1;
    ValuePool valuePool = 2;
    MemoBytes memo = 3;
}

// An object wrapper for memo bytes, to facilitate representing the
// `change_memo == None` case.
message MemoBytes {
    bytes value = 1;
}
