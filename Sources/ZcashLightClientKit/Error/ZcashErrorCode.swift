// Generated using Sourcery 2.0.2 â€” https://github.com/krzysztofzablocki/Sourcery
// DO NOT EDIT

/*
!!!!! To edit this file go to ZcashErrorCodeDefinition first and udate/add codes. Then run generateErrorCode.sh script to regenerate this file.

By design each error code should be used only at one place in the app. Thanks to that it is possible to identify exact line in the code from which the
error originates. And it can help with debugging.
*/

public enum ZcashErrorCode: String {
    /// Unknown GRPC Service error
    case serviceUnknownError = "ZSRVC0001"
    /// LightWalletService.getInfo failed.
    case serviceGetInfoFailed = "ZSRVC0002"
    /// LightWalletService.latestBlock failed.
    case serviceLatestBlockFailed = "ZSRVC0003"
    /// LightWalletService.latestBlockHeight failed.
    case serviceLatestBlockHeightFailed = "ZSRVC0004"
    /// LightWalletService.blockRange failed.
    case serviceBlockRangeFailed = "ZSRVC0005"
    /// LightWalletService.submit failed.
    case serviceSubmitFailed = "ZSRVC0006"
    /// LightWalletService.fetchTransaction failed.
    case serviceFetchTransactionFailed = "ZSRVC0007"
    /// LightWalletService.fetchUTXOs failed.
    case serviceFetchUTXOsFailed = "ZSRVC0008"
    /// LightWalletService.blockStream failed.
    case serviceBlockStreamFailed = "ZSRVC0000"
    /// Migration of the pending DB failed because of unspecific reason.
    case dbMigrationGenericFailure = "ZDBMG0001"
    /// Migration of the pending DB failed because unknown version of the existing database.
    case dbMigrationInvalidVersion = "ZDBMG00002"
    /// Migration of the pending DB to version 1 failed.
    case dbMigrationV1 = "ZDBMG00003"
    /// Migration of the pending DB to version 2 failed.
    case dbMigrationV2 = "ZDBMG00004"
    /// SimpleConnectionProvider init of Connection failed.
    case simpleConnectionProvider = "ZSCPC0001"
    /// Downloaded file with sapling spending parameters isn't valid.
    case saplingParamsInvalidSpendParams = "ZSAPP0001"
    /// Downloaded file with sapling output parameters isn't valid.
    case saplingParamsInvalidOutputParams = "ZSAPP0002"
    /// Failed to download sapling parameters file
    /// - `error` is download error.
    /// - `downloadURL` is URL from which was file downloaded.
    case saplingParamsDownload = "ZSAPP0003"
    /// Failed to move sapling parameters file to final destination after download.
    /// - `error` is move error.
    /// - `downloadURL` is URL from which was file downloaded.
    /// - `destination` is filesystem URL pointing to location where downloaded file should be moved.
    case saplingParamsCantMoveDownloadedFile = "ZSAPP0004"
    /// SQLite query failed when fetching received notes count from the database.
    /// - `sqliteError` is error produced by SQLite library.
    case notesDAOReceivedCount = "ZNDAO0001"
    /// SQLite query failed when fetching received notes from the database.
    /// - `sqliteError` is error produced by SQLite library.
    case notesDAOReceivedNote = "ZNDAO0002"
    /// Fetched note from the SQLite but can't decode that.
    /// - `error` is decoding error.
    case notesDAOReceivedCantDecode = "ZNDAO0003"
    /// SQLite query failed when fetching sent notes count from the database.
    /// - `sqliteError` is error produced by SQLite library.
    case notesDAOSentCount = "ZNDAO0004"
    /// SQLite query failed when fetching sent notes from the database.
    /// - `sqliteError` is error produced by SQLite library.
    case notesDAOSentNote = "ZNDAO0005"
    /// Fetched note from the SQLite but can't decode that.
    /// - `error` is decoding error.
    case notesDAOSentCantDecode = "ZNDAO0006"
    /// SQLite query failed when fetching block information from database.
    /// - `sqliteError` is error produced by SQLite library.
    case blockDAOBlock = "ZBDAO0001"
    /// Fetched block information from DB but can't decode them.
    /// - `error` is decoding error.
    case blockDAOCantDecode = "ZBDAO0002"
    /// SQLite query failed when fetching height of the latest block from the database.
    /// - `sqliteError` is error produced by SQLite library.
    case blockDAOLatestBlockHeight = "ZBDAO0003"
    /// Error from rust layer when calling ZcashRustBackend.createAccount
    /// - `rustError` contains error generated by the rust layer.
    case rustCreateAccount = "ZRUST0001"
    /// Error from rust layer when calling ZcashRustBackend.createToAddress
    /// - `rustError` contains error generated by the rust layer.
    case rustCreateToAddress = "ZRUST0002"
    /// Error from rust layer when calling ZcashRustBackend.decryptAndStoreTransaction
    /// - `rustError` contains error generated by the rust layer.
    case rustDecryptAndStoreTransaction = "ZRUST0003"
    /// Error from rust layer when calling ZcashRustBackend.getBalance
    /// - `account` is account passed to ZcashRustBackend.getBalance.
    /// - `rustError` contains error generated by the rust layer.
    case rustGetBalance = "ZRUST0004"
    /// Error from rust layer when calling ZcashRustBackend.getCurrentAddress
    /// - `rustError` contains error generated by the rust layer.
    case rustGetCurrentAddress = "ZRUST0005"
    /// Unified address generated by rust layer is invalid when calling ZcashRustBackend.getCurrentAddress
    case rustGetCurrentAddressInvalidAddress = "ZRUST0006"
    /// Error from rust layer when calling ZcashRustBackend.getNearestRewindHeight
    /// - `rustError` contains error generated by the rust layer.
    case rustGetNearestRewindHeight = "ZRUST0007"
    /// Error from rust layer when calling ZcashRustBackend.getNextAvailableAddress
    /// - `rustError` contains error generated by the rust layer.
    case rustGetNextAvailableAddress = "ZRUST0008"
    /// Unified address generated by rust layer is invalid when calling ZcashRustBackend.getNextAvailableAddress
    case rustGetNextAvailableAddressInvalidAddress = "ZRUST0009"
    /// account parameter is lower than 0 when calling ZcashRustBackend.getTransparentBalance
    /// - `account` is account passed to ZcashRustBackend.getTransparentBalance.
    case rustGetTransparentBalanceNegativeAccount = "ZRUST0010"
    /// Error from rust layer when calling ZcashRustBackend.getTransparentBalance
    /// - `account` is account passed to ZcashRustBackend.getTransparentBalance.
    /// - `rustError` contains error generated by the rust layer.
    case rustGetTransparentBalance = "ZRUST0011"
    /// Error from rust layer when calling ZcashRustBackend.getVerifiedBalance
    /// - `account` is account passed to ZcashRustBackend.getVerifiedBalance.
    /// - `rustError` contains error generated by the rust layer.
    case rustGetVerifiedBalance = "ZRUST0012"
    /// account parameter is lower than 0 when calling ZcashRustBackend.getVerifiedTransparentBalance
    /// - `account` is account passed to ZcashRustBackend.getVerifiedTransparentBalance.
    case rustGetVerifiedTransparentBalanceNegativeAccount = "ZRUST0013"
    /// Error from rust layer when calling ZcashRustBackend.getVerifiedTransparentBalance
    /// - `account` is account passed to ZcashRustBackend.getVerifiedTransparentBalance.
    /// - `rustError` contains error generated by the rust layer.
    case rustGetVerifiedTransparentBalance = "ZRUST0014"
    /// Error from rust layer when calling ZcashRustBackend.initDataDb
    /// - `rustError` contains error generated by the rust layer.
    case rustInitDataDb = "ZRUST0015"
    /// Any of the viewing keys passed to the ZcashRustBackend.initAccountsTable method contains null bytes before end
    case rustInitAccountsTableViewingKeyCotainsNullBytes = "ZRUST0016"
    /// Any of the viewing keys passed to the ZcashRustBackend.initAccountsTable method isn't valid
    case rustInitAccountsTableViewingKeyIsInvalid = "ZRUST0017"
    /// Error from rust layer when calling ZcashRustBackend.initAccountsTable
    case rustInitAccountsTableDataDbNotEmpty = "ZRUST0018"
    /// Error from rust layer when calling ZcashRustBackend.initAccountsTable
    /// - `rustError` contains error generated by the rust layer.
    case rustInitAccountsTable = "ZRUST0019"
    /// Error from rust layer when calling ZcashRustBackend.initBlockMetadataDb
    /// - `rustError` contains error generated by the rust layer.
    case rustInitBlockMetadataDb = "ZRUST0020"
    /// Unable to allocate memory required to write blocks when calling ZcashRustBackend.writeBlocksMetadata
    case rustWriteBlocksMetadataAllocationProblem = "ZRUST0021"
    /// Error from rust layer when calling ZcashRustBackend.writeBlocksMetadata
    /// - `rustError` contains error generated by the rust layer.
    case rustWriteBlocksMetadata = "ZRUST0022"
    /// hash passed to the ZcashRustBackend.initBlocksTable method contains null bytes before end
    case rustInitBlocksTableHashContainsNullBytes = "ZRUST0023"
    /// saplingTree passed to the ZcashRustBackend.initBlocksTable method contains null bytes before end
    case rustInitBlocksTableSaplingTreeContainsNullBytes = "ZRUST0024"
    /// Error from rust layer when calling ZcashRustBackend.initBlocksTable
    case rustInitBlocksTableDataDbNotEmpty = "ZRUST0025"
    /// Error from rust layer when calling ZcashRustBackend.initBlocksTable
    /// - `rustError` contains error generated by the rust layer.
    case rustInitBlocksTable = "ZRUST0026"
    /// Error from rust layer when calling ZcashRustBackend.listTransparentReceivers
    /// - `rustError` contains error generated by the rust layer.
    case rustListTransparentReceivers = "ZRUST0027"
    /// Transparent receiver generated by rust layer is invalid when calling ZcashRustBackend.listTransparentReceivers
    case rustListTransparentReceiversInvalidAddress = "ZRUST0028"
    /// Error from rust layer when calling ZcashRustBackend.putUnspentTransparentOutput
    /// - `rustError` contains error generated by the rust layer.
    case rustPutUnspentTransparentOutput = "ZRUST0029"
    /// Error unrelated to chain validity from rust layer when calling ZcashRustBackend.validateCombinedChain
    /// - `rustError` contains error generated by the rust layer.
    case rustValidateCombinedChainValidationFailed = "ZRUST0030"
    /// Error from rust layer which means that combined chain isn't valid.
    /// - `upperBound` is the height of the highest invalid block (on the assumption that the highest block in the cache database is correct).
    case rustValidateCombinedChainInvalidChain = "ZRUST0031"
    /// Error from rust layer when calling ZcashRustBackend.rewindToHeight
    /// - `rustError` contains error generated by the rust layer.
    case rustRewindToHeight = "ZRUST0032"
    /// Error from rust layer when calling ZcashRustBackend.rewindCacheToHeight
    /// - `rustError` contains error generated by the rust layer.
    case rustRewindCacheToHeight = "ZRUST0033"
    /// Error from rust layer when calling ZcashRustBackend.scanBlocks
    /// - `rustError` contains error generated by the rust layer.
    case rustScanBlocks = "ZRUST0034"
    /// Error from rust layer when calling ZcashRustBackend.shieldFunds
    /// - `rustError` contains error generated by the rust layer.
    case rustShieldFunds = "ZRUST0035"
    /// Error from rust layer when calling ZcashRustBackend.consensusBranchIdFor
    /// - `rustError` contains error generated by the rust layer.
    case rustNoConsensusBranchId = "ZRUST0036"
    /// address passed to the ZcashRustBackend.receiverTypecodesOnUnifiedAddress method contains null bytes before end
    /// - `address` is address passed to ZcashRustBackend.receiverTypecodesOnUnifiedAddress.
    case rustReceiverTypecodesOnUnifiedAddressContainsNullBytes = "ZRUST0037"
    /// Error from rust layer when calling ZcashRustBackend.receiverTypecodesOnUnifiedAddress
    case rustRustReceiverTypecodesOnUnifiedAddressMalformed = "ZRUST0038"
    /// Error from rust layer when calling ZcashRustBackend.deriveUnifiedSpendingKey
    /// - `rustError` contains error generated by the rust layer.
    case rustDeriveUnifiedSpendingKey = "ZRUST0039"
    /// Error from rust layer when calling ZcashRustBackend.deriveUnifiedFullViewingKey
    /// - `rustError` contains error generated by the rust layer.
    case rustDeriveUnifiedFullViewingKey = "ZRUST0040"
    /// Viewing key derived by rust layer is invalid when calling ZcashRustBackend.deriveUnifiedFullViewingKey
    case rustDeriveUnifiedFullViewingKeyInvalidDerivedKey = "ZRUST0041"
    /// Error from rust layer when calling ZcashRustBackend.getSaplingReceiver
    /// - `address` is address passed to ZcashRustBackend.getSaplingReceiver.
    case rustGetSaplingReceiverInvalidAddress = "ZRUST0042"
    /// Sapling receiver generated by rust layer is invalid when calling ZcashRustBackend.getSaplingReceiver
    case rustGetSaplingReceiverInvalidReceiver = "ZRUST0043"
    /// Error from rust layer when calling ZcashRustBackend.getTransparentReceiver
    /// - `address` is address passed to ZcashRustBackend.getTransparentReceiver.
    case rustGetTransparentReceiverInvalidAddress = "ZRUST0044"
    /// Transparent receiver generated by rust layer is invalid when calling ZcashRustBackend.getTransparentReceiver
    case rustGetTransparentReceiverInvalidReceiver = "ZRUST0045"
    /// SQLite query failed when fetching all accounts from the database.
    /// - `sqliteError` is error produced by SQLite library.
    case accountDAOGetAll = "ZADAO0001"
    /// Fetched accounts from SQLite but can't decode them.
    /// - `error` is decoding error.
    case accountDAOGetAllCantDecode = "ZADAO0002"
    /// SQLite query failed when seaching for accounts in the database.
    /// - `sqliteError` is error produced by SQLite library.
    case accountDAOFindBy = "ZADAO0003"
    /// Fetched accounts from SQLite but can't decode them.
    /// - `error` is decoding error.
    case accountDAOFindByCantDecode = "ZADAO0004"
    /// Object passed to update() method conforms to `AccountEntity` protocol but isn't exactly `Account` type.
    case accountDAOUpdateInvalidAccount = "ZADAO0005"
    /// SQLite query failed when updating account in the database.
    /// - `sqliteError` is error produced by SQLite library.
    case accountDAOUpdate = "ZADAO0006"
    /// Update of the account updated 0 rows in the database. One row should be updated.
    case accountDAOUpdatedZeroRows = "ZADAO0007"
    /// Failed to write block to disk.
    case blockRepositoryWriteBlock = "ZBLRP00001"
    /// Failed to get filename for the block from file URL.
    case blockRepositoryGetFilename = "ZBLRP0002"
    /// Failed to parse block height from filename.
    case blockRepositoryParseHeightFromFilename = "ZBLRP0003"
    /// Failed to remove existing block from disk.
    case blockRepositoryRemoveExistingBlock = "ZBLRP0004"
    /// Failed to get filename and information if url points to directory from file URL.
    case blockRepositoryGetFilenameAndIsDirectory = "ZBLRP0005"
    /// Failed to create blocks cache directory.
    case blockRepositoryCreateBlocksCacheDirectory = "ZBLRP0006"
    /// Failed to read content of directory.
    case blockRepositoryReadDirectoryContent = "ZBLRP0007"
    /// Failed to remove block from disk after rewind operation.
    case blockRepositoryRemoveBlockAfterRewind = "ZBLRP0008"
    /// Failed to remove blocks cache directory while clearing storage.
    case blockRepositoryRemoveBlocksCacheDirectory = "ZBLRP0009"
    /// Stream downloading the given block range failed.
    case blockDownloaderServiceDownloadBlockRange = "ZBDSEO0001"
    /// The AsyncThrowingStream's iterator failed to return next block.
    case blockDownloaderStreamNextBlock = "ZBDS0001"
    /// Initialization of `ZcashTransaction.Overview` failed.
    case zcashTransactionOverviewInit = "ZTEZT0001"
    /// Initialization of `ZcashTransaction.Received` failed.
    case zcashTransactionReceivedInit = "ZTEZT0002"
    /// Initialization of `ZcashTransaction.Sent` failed.
    case zcashTransactionSentInit = "ZTEZT0003"
    /// Entity not found in the database, result of `createEntity` execution.
    case transactionRepositoryEntityNotFound = "ZTREE0001"
    /// `Find` call is missing fields, required fields are transaction `index` and `blockTime`.
    case transactionRepositoryTransactionMissingRequiredFields = "ZTREE0002"
    /// Counting all transactions failed.
    case transactionRepositoryCountAll = "ZTREE0003"
    /// Counting all unmined transactions failed.
    case transactionRepositoryCountUnmined = "ZTREE0004"
    /// Execution of a query failed.
    case transactionRepositoryQueryExecute = "ZTREE0005"
    /// Finding memos in the database failed.
    case transactionRepositoryFindMemos = "ZTREE0006"
}
